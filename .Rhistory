mean(data_imputed_reg$X2), "for regression imputation.")
cat("Ignoring the missing values, the mean for X1 in the original data set is:",
mean(data$X1, na.rm = TRUE), "while it is ", mean(data_imputed_kNN$X1),
"for the nearest-neighbour hot deck imputation and ",
mean(data_imputed_reg$X1), "for the regression imputation.")
cat("The mean for X2 in the original data set is", mean(data$X2, na.rm = TRUE),
"while it is ", mean(data_imputed_kNN$X2), "for the nearest neighbour
imputation and", mean(data_imputed_reg$X2), "for regression imputation.")
?cat
cat("Ignoring the missing values, the mean for X1 in the original data set is:",
mean(data$X1, na.rm = TRUE), "while it is ", mean(data_imputed_kNN$X1),
"for the nearest-neighbour hot deck imputation and ",
mean(data_imputed_reg$X1), "for the regression imputation." \\)
cat("Ignoring the missing values, the mean for X1 in the original data set is:",
mean(data$X1, na.rm = TRUE), "while it is ", mean(data_imputed_kNN$X1),
"for the nearest-neighbour hot deck imputation and ",
mean(data_imputed_reg$X1), "for the regression imputation." "\\")
cat("Ignoring the missing values, the mean for X1 in the original data set is:",
mean(data$X1, na.rm = TRUE), "while it is ", mean(data_imputed_kNN$X1),
"for the nearest-neighbour hot deck imputation and ",
mean(data_imputed_reg$X1), "for the regression imputation." \n)
?write.csv
write.csv(data_imputed_kNN, "kNN_ImputationData.csv", sep = ";" )
write.csv(data_imputed_kNN, "kNN_ImputationData.csv")
write.csv(data_imputed_reg, "Reg_ImputationData.csv")
hist(data$X3)
plot(data$X3)
plot(data$X4)
plot(data$X5)
plot(data$X6)
plot(data$X7)
plot(data$X8)
# Define the observed data with missing values
income_data <- c(50, 10, 30, NA, 100, NA, 40, 40, NA, 60)
# Step 1: Impute missing values with the mean of observed values
mean_income <- mean(income_data, na.rm = TRUE)  # Calculate mean of observed values
income_data_imputed <- ifelse(is.na(income_data), mean_income, income_data)
# Step 2: Define the number of observations
n <- length(income_data_imputed)
# Step 3: Compute the full dataset mean
mean_full <- mean(income_data_imputed)
# Step 4: Jackknife estimates - Leave one observation out each time and calculate the mean
jackknife_means <- numeric(n)  # Initialize a vector to store jackknife means
for (i in 1:n) {
# Remove the i-th observation and calculate the mean
jackknife_means[i] <- mean(income_data_imputed[-i])
}
print(jackknife_means)
print(as.table(jackknife_means))
print(as.data.frame(jackknife_means))
# Step 5: Calculate the jackknife variance
jackknife_variance <- (n - 1) / n * sum((jackknife_means - mean_full)^2)
# Print results
cat("Imputed Income Data:", income_data_imputed, "\n")
cat("Full Dataset Mean:", mean_full, "\n")
cat("Jackknife Means:", jackknife_means, "\n")
cat("Jackknife Variance Estimate:", jackknife_variance, "\n")
cat("Jackknife Means:", as.data.frame(jackknife_means), "\n")
cat("Jackknife Means:", as.data.frame(jackknife_means), "\n")
cat("Jackknife Means:", jackknife_means, "\n")
cat("Jackknife Variance Estimate:", jackknife_variance, "\n")
# Print results
cat("Imputed Income Data:", income_data_imputed, "\n")
cat("Full Dataset Mean:", mean_full, "\n")
cat("Jackknife Means:", jackknife_means, "\n")
cat("Jackknife Variance Estimate:", jackknife_variance, "\n")
B <- 1000  # Number of bootstrap samples (can be adjusted)
n <- length(income_data_imputed)
# Define the mean used for imputing missing values
imputed_mean <- 47.14
# Define the bootstrap samples with imputed mean for missing values
bootstrap_samples <- list(
sample1 = c(100, imputed_mean, 60, 30, imputed_mean, 30, 30, imputed_mean, 10, 10),
sample2 = c(100, 30, 10, 40, imputed_mean, 30, 50, 50, 40, 100),
sample3 = c(imputed_mean, 50, imputed_mean, 40, 30, imputed_mean, imputed_mean, 60, 10, 40),
sample4 = c(10, 60, imputed_mean, 10, imputed_mean, 40, 30, imputed_mean, 100, 40),
sample5 = c(imputed_mean, 10, 40, 40, 50, 40, 100, 40, imputed_mean, 40)
)
# Calculate mean for each bootstrap sample
bootstrap_means <- sapply(bootstrap_samples, mean)
# Calculate the variance of the bootstrap sample means
bootstrap_variance <- var(bootstrap_means)
# Print results
cat("Bootstrap Sample Means:", bootstrap_means, "\n")
cat("Bootstrap Variance Estimate:", bootstrap_variance, "\n")
cat("Jackknife Variance Estimate:", jackknife_variance, "\n")
# Define the bootstrap samples as lists
bootstrap_samples <- list(
sample1 = c(100, NA, 60, 30, NA, 30, 30, NA, 10, 10),
sample2 = c(100, 30, 10, 40, NA, 30, 50, 50, 40, 100),
sample3 = c(NA, 50, NA, 40, 30, NA, NA, 60, 10, 40),
sample4 = c(10, 60, NA, 10, NA, 40, 30, NA, 100, 40),
sample5 = c(NA, 10, 40, 40, 50, 40, 100, 40, NA, 40)
)
# Initialize a vector to store the means of each completed bootstrap sample
bootstrap_means <- numeric(length(bootstrap_samples))
bootstrap_means
# Calculate the mean for each sample, imputing missing values with the sample's mean
for (i in 1:length(bootstrap_samples)) {
sample <- bootstrap_samples[[i]]
# Step 1: Calculate mean of observed (non-missing) values in the sample
sample_mean <- mean(sample, na.rm = TRUE)
# Step 2: Impute missing values in the sample with the calculated sample mean
sample[is.na(sample)] <- sample_mean
# Step 3: Calculate the mean of the imputed sample
bootstrap_means[i] <- mean(sample)
}
# Step 4: Calculate the variance of the bootstrap sample means
bootstrap_variance <- var(bootstrap_means)
# Print results
cat("Bootstrap Sample Means after Imputation:", bootstrap_means, "\n")
cat("Bootstrap Variance Estimate:", bootstrap_variance, "\n")
# Define the original data with missing values
income_data <- c(50, 10, 30, NA, 100, NA, 40, 40, NA, 60)
# Number of observations
n <- length(income_data)
# Initialize a vector to store the means of each completed jackknife sample
jackknife_means <- numeric(n)
# Full sample mean (to compare later)
mean_full <- mean(income_data, na.rm = TRUE)
# Jackknife loop: Leave one observation out at a time
for (i in 1:n) {
# Step 1: Exclude the i-th observation
jackknife_sample <- income_data[-i]
# Step 2: Calculate the mean of observed (non-missing) values in the jackknife sample
sample_mean <- mean(jackknife_sample, na.rm = TRUE)
# Step 3: Impute missing values in the jackknife sample with the calculated sample mean
jackknife_sample[is.na(jackknife_sample)] <- sample_mean
# Step 4: Calculate the mean of the completed jackknife sample
jackknife_means[i] <- mean(jackknife_sample)
}
# Step 5: Calculate the jackknife variance
jackknife_variance <- (n - 1) / n * sum((jackknife_means - mean_full)^2)
# Print results
cat("Jackknife Sample Means after Imputation:", jackknife_means, "\n")
cat("Full Dataset Mean (observed data):", mean_full, "\n")
cat("Jackknife Variance Estimate:", jackknife_variance, "\n")
# Define the original data with missing values
income_data <- c(50, 10, 30, NA, 100, NA, 40, 40, NA, 60)
# Number of observations
n <- length(income_data)
# Initialize a vector to store the means of each completed jackknife sample
jackknife_means <- numeric(n)
# Full sample mean (to compare later)
mean_full <- mean(income_data, na.rm = TRUE)
# Jackknife loop: Leave one observation out at a time
for (i in 1:n) {
# Step 1: Exclude the i-th observation
jackknife_sample <- income_data[-i]
# Step 2: Calculate the mean of observed (non-missing) values in the jackknife sample
sample_mean <- mean(jackknife_sample, na.rm = TRUE)
# Step 3: Impute missing values in the jackknife sample with the calculated sample mean
jackknife_sample[is.na(jackknife_sample)] <- sample_mean
# Step 4: Calculate the mean of the completed jackknife sample
jackknife_means[i] <- mean(jackknife_sample)
}
# Step 5: Calculate the jackknife variance
jackknife_variance <- (n - 1) / n * sum((jackknife_means - mean_full)^2)
# Print results
cat("Jackknife Sample Means after Imputation:", jackknife_means, "\n")
cat("Full Dataset Mean (observed data):", mean_full, "\n")
cat("Jackknife Variance Estimate:", jackknife_variance, "\n")
# Define the five imputed datasets
imputed_datasets <- list(
c(50, 10, 30, 59, 100, 42, 40, 40, 29, 60),  # Dataset 1
c(50, 10, 30, 100, 100, 5, 40, 40, 37, 60),  # Dataset 2
c(50, 10, 30, 51, 100, 6, 40, 40, 77, 60),   # Dataset 3
c(50, 10, 30, 72, 100, 3, 40, 40, 38, 60),   # Dataset 4
c(50, 10, 30, 73, 100, -6, 40, 40, 29, 60)   # Dataset 5
)
# Number of imputations
m <- length(imputed_datasets)
m
# Step 1: Calculate mean and variance for each imputed dataset
means <- sapply(imputed_datasets, mean)  # Mean of each dataset
variances <- sapply(imputed_datasets, var)  # Variance of each dataset
# Overall mean (Q_bar)
Q_bar <- mean(means)
# Within-imputation variance (U_bar)
U_bar <- mean(variances)
# Between-imputation variance (B)
B <- sum((means - Q_bar)^2) / (m - 1)
# Total variance (T)
T <- U_bar + (1 + 1/m) * B
# Total variance (T)
TotalVar <- U_bar + (1 + 1/m) * B
# Between-imputation variance (B)
BetVar <- sum((means - Q_bar)^2) / (m - 1)
# Total variance (T)
TotalVar <- U_bar + (1 + 1/m) * BetVar
rm(t)
rm(T)
rm(B)
# Define the five imputed datasets
imputed_datasets <- list(
c(50, 10, 30, 59, 100, 42, 40, 40, 29, 60),  # Dataset 1
c(50, 10, 30, 100, 100, 5, 40, 40, 37, 60),  # Dataset 2
c(50, 10, 30, 51, 100, 6, 40, 40, 77, 60),   # Dataset 3
c(50, 10, 30, 72, 100, 3, 40, 40, 38, 60),   # Dataset 4
c(50, 10, 30, 73, 100, -6, 40, 40, 29, 60)   # Dataset 5
)
# Number of imputations
m <- length(imputed_datasets)
# Step 1: Calculate mean and variance for each imputed dataset
means <- sapply(imputed_datasets, mean)  # Mean of each dataset
variances <- sapply(imputed_datasets, var)  # Variance of each dataset
# Step 2: Apply Rubin's Rules
# Overall mean (Q_bar)
Q_bar <- mean(means)
# Within-imputation variance (U_bar)
U_bar <- mean(variances)
# Between-imputation variance (B)
BetVar <- sum((means - Q_bar)^2) / (m - 1)
# Total variance (T)
TotalVar <- U_bar + (1 + 1/m) * BetVar
# Print results
cat("Means of each imputed dataset:", means, "\n")
cat("Variances of each imputed dataset:", variances, "\n")
cat("Overall Mean:", Q_bar, "\n")
cat("Within-Imputation Variance:", U_bar, "\n")
cat("Between-Imputation Variance:", BetVar, "\n")
cat("Total Variance:", TotalVar, "\n")
print(dfc)
dfc <- data.frame(
Case_Number = c(4, 6, 9),
Donor = c(5, 2, 8),
Imputed_Values = c(100, 10, 40)
)
print(dfc)
library(knitr)
dfa <- data.frame(
Case_Number = c(4, 6, 9),
Donor = c(8, 8, 5),
Imputed_Values = c(40, 40, 100)
)
kable(dfa)
cell <- 8
base <- 3
x <- floor(cell/base)
r <- cell - base * x
x
r
cell <- 10
base <- 3
x <- floor(cell/base)
r <- cell - base * x
x
r
cell <- 11
base <- 3
x <- floor(cell/base)
x
r <- cell - base * x
r
cell <- 11.4
base <- 3
x <- floor(cell/base)
x
r <- cell - base * x
r
cell <- 9
base <- 3
x <- floor(cell/base)
x
r <- cell - base * x
r
5000000/0.9091
100/(2+(10/100))
100/(2+(5/100))
33+8+52+236+27+702+43+43+223+127+82
1647 - 1576
1220-(702+43+43+223+127+82)
44-8-33
53-27-22
73-52
46-25-4-3-5
40-12-22
40+248+53
341 - (1+33+6+236+24+27+22)
33+236+27
1+33+6
1+33+6 + 236+12
1+33+6 + 236+12 +27+22
27+22
25+4+3+5
223+80
500-(238+59+80+47)
27+22+1
115 - (4+43+59)
223+80
1+1+9+51
1+1+9+51+6+1
25+4+3+5
46-37
52+8+33+236+27+702+43+43+223+127+82
52+8+33+236+27+702+43+43+223+127+82+3+23+1
52+8+33+236+27+702+43+43+223+127+82+3+23+1+4
3+23+52+8+4+1+33+236+27+702+43+43+223+127+82
8+4+1
8+5+3
44-(8+4+1)
44-(8+5+3)
8+5+3
44-16
1647-(82+127+223+43+43+702+27+236+33+3+5+8+28+52+3)
1647-(1220+296+44+52+3)
32-23
32-24
46-(1+1+3+25+4+3+5)
175-(127)
175-(127+1+1)
175-(127+2+3)
77-(43+3+1)
77-(43+3+3)
500-(238+59+80+47)
500-(238+59+80+47+28+43)
500-(238+59+80+47+30+46)
500-(238+59+80+47)
175-127-46
309-(223+80)
115-(4+43+59)
9+51+1+1
73-1-1-9-51
71-1-1-9-51
46-(1+1+3+25+4+3+1+5)
25+4+3+1+5
309-(223+80+2)
73-52
73-52-1
73-52-2
641-47-46-80-30-59-238-22-12-3-6-1-1-75
52+19
2+1+12+3
115-(4+43+59)
115-(4+43+59+1)
115-(4+43+59+2)
71-51-1-1
-9
71-51-1-1-9
309-2-223-80
19-12-3
115-4-43-59
22-2-1-12-3
309-80-223-2
which git
which git
getwd
getwd
getwd()
setwd("/Users/lucakogelheide")
getwd()
which git
170.510	- 147.134
child_born <- c(170.510, 172.520, 169.836, 168.525, 169.680, 168.681, 179.441,
167.504, 164.487)
library(ggplot2)
child_born <- c(170.510, 172.520, 169.836, 168.525, 169.680, 168.681, 179.441,
167.504, 164.487)
years <- 2015:2023
barplot(
height = child_born,
names.arg = years,
col = "skyblue",
ylim = c(160, 180), # Set y-axis limits starting at 160 (in thousands)
xlab = "Year",
ylab = "Live Born Children (in thousands)",
main = "Live Born Children per Year (2015-2023)"
)
grid(nx = NA, ny = NULL, lty = "dotted")
# Data
child_born <- c(170.510, 172.520, 169.836, 168.525, 169.680, 168.681, 179.441,
167.504, 164.487)
deaths <- c(147.134, 148.997, 150.214, 153.363, 151.885, 168.678, 170.972,
170.112, 169.521)
years <- 2015:2023
# Combine data into a matrix for grouped bar chart
data <- rbind(child_born, deaths)
# Create the bar chart
barplot(
height = data,
beside = TRUE, # Grouped bars
names.arg = years,
col = c("skyblue", "salmon"), # Colors for live births and deaths
ylim = c(160, 180), # Set y-axis limits starting at 160 (in thousands)
xlab = "Year",
ylab = "Population Data (in thousands)",
main = "Live Born Children and Deaths per Year (2015-2023)",
legend.text = c("Live Born Children", "Deaths"),
args.legend = list(x = "topright", bty = "n") # Add a legend
)
# Add a grid for better readability
grid(nx = NA, ny = NULL, lty = "dotted")
# Create the bar chart
barplot(
height = data,
beside = TRUE, # Grouped bars
names.arg = years,
col = c("skyblue", "salmon"), # Colors for live births and deaths
ylim = c(140, 180), # Set y-axis limits starting at 160 (in thousands)
xlab = "Year",
ylab = "Population Data (in thousands)",
main = "Live Born Children and Deaths per Year (2015-2023)",
legend.text = c("Live Born Children", "Deaths"),
args.legend = list(x = "topright", bty = "n") # Add a legend
)
# Data
child_born <- c(170.510, 172.520, 169.836, 168.525, 169.680, 168.681, 179.441,
167.504, 164.487)
deaths <- c(147.134, 148.997, 150.214, 153.363, 151.885, 168.678, 170.972,
170.112, 169.521)
years <- 2015:2023
# Create the bar chart for live-born children
barplot_heights <- barplot(
height = child_born,
names.arg = years,
col = "skyblue",
ylim = c(140, 180), # Adjust y-axis to include deaths
xlab = "Year",
ylab = "Population Data (in thousands)",
main = "Live Born Children and Deaths per Year (2015-2023)"
)
# Add a line for deaths
lines(barplot_heights, deaths, type = "o", col = "red", lwd = 2, pch = 16)
# Add a legend
legend(
"topright",
legend = c("Live Born Children", "Deaths"),
fill = c("skyblue", NA),
border = c("black", NA),
lty = c(NA, 1),
col = c(NA, "red"),
pch = c(NA, 16),
lwd = c(NA, 2),
bty = "n" # Remove legend box border
)
# Add a grid for better readability
grid(nx = NA, ny = NULL, lty = "dotted")
# Data
natural_increase <- c(23.376, 23.523, 19.622, 15.162, 17.795, 0.003, 8.469, -2.608, -5.034)
deaths <- c(147.134, 148.997, 150.214, 153.363, 151.885, 168.678, 170.972,
170.112, 169.521)
years <- 2015:2023
# Create an empty plot for the first y-axis (Natural Increase)
par(mar = c(5, 5, 4, 5)) # Adjust margins to add space for the second y-axis
barplot_heights <- barplot(
natural_increase,
names.arg = years,
col = "skyblue",
ylim = c(-10, 25), # Y-axis limits for natural increase
xlab = "Year",
ylab = "Natural Increase (in thousands)",
main = "Natural Increase and Deaths (2015-2023)"
)
# Add the second y-axis (Deaths)
par(new = TRUE) # Overlay the plot
plot(
barplot_heights, deaths, type = "o", col = "red", lwd = 2, pch = 16,
axes = FALSE, xlab = "", ylab = "", ylim = c(140, 180) # Adjust y-axis for deaths
)
axis(4, at = seq(140, 180, by = 10), col = "red", col.axis = "red") # Second y-axis
mtext("Deaths (in thousands)", side = 4, line = 3, col = "red") # Label for second y-axis
# Highlight 2021
abline(v = barplot_heights[7], col = "black", lty = 2) # Add a vertical line for 2021
text(barplot_heights[7], 10, "2021 Spike", pos = 3, cex = 0.8, col = "blue")
# Add a legend
legend(
"topright",
legend = c("Natural Increase", "Deaths"),
fill = c("skyblue", NA),
border = c("black", NA),
lty = c(NA, 1),
col = c(NA, "red"),
pch = c(NA, 16),
lwd = c(NA, 2),
bty = "n" # Remove legend box border
)
library(readxl)
X20250104_Wahlanalysen_Bochum <- read_excel("Downloads/20250104 Wahlanalysen Bochum.xlsx")
View(X20250104_Wahlanalysen_Bochum)
library(tidyverse)
library(ggplot2)
121/733
KW <- c(2
3
library(readxl)
X20250104_Wahlanalysen_Bochum <- read_excel("Downloads/20250104 Wahlanalysen Bochum.xlsx",
sheet = "Prio STBZ")
View(X20250104_Wahlanalysen_Bochum)
KW <- X20250104_Wahlanalysen_Bochum %>%
filter(is.numeric(...2))
KW <- X20250104_Wahlanalysen_Bochum %>%
filter(...2)
X20250104_Wahlanalysen_Bochum[, 2]
X20250104_Wahlanalysen_Bochum[4:, 2]
X20250104_Wahlanalysen_Bochum[4:189, 2]
KW <- X20250104_Wahlanalysen_Bochum[4:189, 2]
LTW <- X20250104_Wahlanalysen_Bochum[4:189, 3]
cor(KW, LTW)
cor(as.numeric(KW), as.numeric(LTW))
KW
as.numeric(KW)
KW <- as.numeric(unnest(KW))
?unnest
KW <- as.numeric(unnest(KW, .x))
KW <- as.numeric(unnest(KW, (.x, as.numeric)))
rm(KW)
rm(LWT)
rm(LTW)
typeof(X20250104_Wahlanalysen_Bochum$...2)
nrow(X20250104_Wahlanalysen_Bochum)
KW <- as.numeric(X20250104_Wahlanalysen_Bochum[4:189, 2])
setwd("~/OneDrive - Universiteit Utrecht/Master Degree/Markup languages and programming/MyWebpage")
